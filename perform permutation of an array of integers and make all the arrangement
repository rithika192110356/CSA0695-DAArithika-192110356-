using System;
using System.Collections.Generic;
 
class GFG
{
    // Function for swapping two numbers
    static void swap(int[] nums, int l, int i)
    {
        int temp = nums[l];
        nums[l] = nums[i];
        nums[i] = temp;
    }
 
    // Function to find the possible permutations
    static void permutations(List<int[]> res, int[] nums, int l, int h)
    {
        // Base case: Add the array to result and return
        if (l == h)
        {
            res.Add((int[])nums.Clone());
            return;
        }
 
        // Permutations made
        for (int i = l; i <= h; i++)
        {
            // Swapping
            swap(nums, l, i);
 
            // Calling permutations for next greater value of l
            permutations(res, nums, l + 1, h);
 
            // Backtracking
            swap(nums, l, i);
        }
    }
 
    // Function to get the permutations
    static List<int[]> permute(int[] nums)
    {
        // Declaring result variable
        List<int[]> res = new List<int[]>();
        int x = nums.Length - 1;
 
        // Calling permutations for the first time by passing l as 0 and h = nums.size()-1
        permutations(res, nums, 0, x);
        return res;
    }
 
    // Driver Code
    static void Main(string[] args)
    {
        int[] nums = { 1, 2, 3 };
        List<int[]> res = permute(nums);
 
        // printing result
        foreach (int[] x in res)
        {
            foreach (int y in x)
            {
                Console.Write(y + " ");
            }
            Console.WriteLine();
        }
    }
}
